"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CucumberAllureWorld = exports.CucumberWorldStep = void 0;
const cucumber_1 = require("@cucumber/cucumber");
const allure_js_commons_1 = require("allure-js-commons");
const internal_1 = require("allure-js-commons/internal");
class CucumberWorldStep {
    constructor(name) {
        this.name = "";
        this.attachments = [];
        this.metadata = {
            labels: [],
            parameter: [],
        };
        this.name = name;
    }
    label(label, value) {
        var _a;
        (_a = this.metadata.labels) === null || _a === void 0 ? void 0 : _a.push({
            name: label,
            value,
        });
    }
    link(url, name, type) {
        var _a;
        (_a = this.metadata.links) === null || _a === void 0 ? void 0 : _a.push({
            name,
            url,
            type,
        });
    }
    parameter(name, value, options) {
        var _a;
        (_a = this.metadata.parameter) === null || _a === void 0 ? void 0 : _a.push({
            name,
            value,
            hidden: (options === null || options === void 0 ? void 0 : options.hidden) || false,
            excluded: (options === null || options === void 0 ? void 0 : options.excluded) || false,
        });
    }
    epic(epic) {
        this.label(allure_js_commons_1.LabelName.EPIC, epic);
    }
    feature(feature) {
        this.label(allure_js_commons_1.LabelName.FEATURE, feature);
    }
    story(story) {
        this.label(allure_js_commons_1.LabelName.STORY, story);
    }
    suite(name) {
        this.label(allure_js_commons_1.LabelName.SUITE, name);
    }
    parentSuite(name) {
        this.label(allure_js_commons_1.LabelName.PARENT_SUITE, name);
    }
    subSuite(name) {
        this.label(allure_js_commons_1.LabelName.SUB_SUITE, name);
    }
    owner(owner) {
        this.label(allure_js_commons_1.LabelName.OWNER, owner);
    }
    severity(severity) {
        this.label(allure_js_commons_1.LabelName.SEVERITY, severity);
    }
    tag(tag) {
        this.label(allure_js_commons_1.LabelName.TAG, tag);
    }
    issue(name, url) {
        this.link(url, name, allure_js_commons_1.LinkType.ISSUE);
    }
    tms(name, url) {
        this.link(url, name, allure_js_commons_1.LinkType.TMS);
    }
    attach(source, type) {
        this.attachments.push({
            name: "attachment",
            content: Buffer.isBuffer(source)
                ? source.toString("base64")
                : Buffer.from(source, "utf8").toString("base64"),
            type,
        });
    }
    async start(body) {
        const startDate = new Date().getTime();
        try {
            const res = body.call(this, this);
            const stepResult = await res;
            return Object.assign(Object.assign({}, this.metadata), { step: {
                    name: this.name,
                    start: startDate,
                    stop: new Date().getTime(),
                    stage: allure_js_commons_1.Stage.FINISHED,
                    status: allure_js_commons_1.Status.PASSED,
                    statusDetails: {},
                    attachments: this.attachments,
                    parameters: [],
                } });
        }
        catch (err) {
            return Object.assign(Object.assign({}, this.metadata), { step: {
                    name: this.name,
                    start: startDate,
                    stop: new Date().getTime(),
                    stage: allure_js_commons_1.Stage.FINISHED,
                    status: allure_js_commons_1.Status.FAILED,
                    statusDetails: err instanceof Error
                        ? {
                            message: err.message,
                            trace: err.stack,
                        }
                        : {},
                    attachments: this.attachments,
                    parameters: [],
                } });
        }
    }
}
exports.CucumberWorldStep = CucumberWorldStep;
class CucumberAllureWorld extends cucumber_1.World {
    async label(label, value) {
        const msgBody = {
            labels: [
                {
                    name: label,
                    value,
                },
            ],
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async link(url, name, type) {
        const msgBody = {
            links: [
                {
                    name,
                    url,
                    type,
                },
            ],
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async parameter(name, value, options) {
        const msgBody = {
            parameter: [
                {
                    name,
                    value,
                    hidden: (options === null || options === void 0 ? void 0 : options.hidden) || false,
                    excluded: (options === null || options === void 0 ? void 0 : options.excluded) || false,
                },
            ],
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async description(markdown) {
        const msgBody = {
            description: markdown,
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async descriptionHtml(html) {
        const msgBody = {
            descriptionHtml: html,
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async writeEnvironmentInfo(info) {
        const msgBody = {
            environmentInfo: info,
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async writeCategoriesDefinitions(categories) {
        const msgBody = {
            categories,
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async step(name, body) {
        const testStep = new CucumberWorldStep(name);
        const msgBody = await testStep.start(body);
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async epic(epic) {
        await this.label(allure_js_commons_1.LabelName.EPIC, epic);
    }
    async feature(feature) {
        await this.label(allure_js_commons_1.LabelName.FEATURE, feature);
    }
    async story(story) {
        await this.label(allure_js_commons_1.LabelName.STORY, story);
    }
    async suite(name) {
        await this.label(allure_js_commons_1.LabelName.SUITE, name);
    }
    async parentSuite(name) {
        await this.label(allure_js_commons_1.LabelName.PARENT_SUITE, name);
    }
    async subSuite(name) {
        await this.label(allure_js_commons_1.LabelName.SUB_SUITE, name);
    }
    async owner(owner) {
        await this.label(allure_js_commons_1.LabelName.OWNER, owner);
    }
    async severity(severity) {
        await this.label(allure_js_commons_1.LabelName.SEVERITY, severity);
    }
    async tag(tag) {
        await this.label(allure_js_commons_1.LabelName.TAG, tag);
    }
    async issue(name, url) {
        await this.link(url, name, allure_js_commons_1.LinkType.ISSUE);
    }
    async tms(name, url) {
        await this.link(url, name, allure_js_commons_1.LinkType.TMS);
    }
}
exports.CucumberAllureWorld = CucumberAllureWorld;
//# sourceMappingURL=CucumberAllureWorld.js.map