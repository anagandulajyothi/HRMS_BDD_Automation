/// <reference types="node" />
import { World } from "@cucumber/cucumber";
import { AttachmentMetadata, AttachmentOptions, Category, ContentType, ExecutableItem, ParameterOptions } from "allure-js-commons";
export declare type CucumberAttachment = {
    name: string;
    type: string;
    content: string;
};
export declare type CucumberAttachmentStepMetadata = Omit<ExecutableItem, "steps" | "attachments"> & {
    attachments: CucumberAttachment[];
};
export interface CucumberAttachmentMetadata extends AttachmentMetadata {
    step?: CucumberAttachmentStepMetadata;
    descriptionHtml?: string;
    environmentInfo?: Record<string, string>;
    categories?: Category[];
}
export interface CucumberExecutable {
    label(label: string, value: string): void | Promise<void>;
    link(url: string, name?: string, type?: string): void | Promise<void>;
    parameter(name: string, value: string, options?: ParameterOptions): void | Promise<void>;
    epic(epic: string): void | Promise<void>;
    feature(feature: string): void | Promise<void>;
    story(story: string): void | Promise<void>;
    suite(name: string): void | Promise<void>;
    parentSuite(name: string): void | Promise<void>;
    subSuite(name: string): void | Promise<void>;
    owner(owner: string): void | Promise<void>;
    severity(severity: string): void | Promise<void>;
    tag(tag: string): void | Promise<void>;
    issue(issue: string, url: string): void | Promise<void>;
    tms(issue: string, url: string): void | Promise<void>;
    attach(name: string, content: Buffer | string, options: ContentType | string | AttachmentOptions): void | Promise<void>;
}
export declare class CucumberWorldStep implements CucumberExecutable {
    name: string;
    attachments: CucumberAttachment[];
    metadata: CucumberAttachmentMetadata;
    constructor(name: string);
    label(label: string, value: string): void;
    link(url: string, name?: string, type?: string): void;
    parameter(name: string, value: string, options?: ParameterOptions): void;
    epic(epic: string): void;
    feature(feature: string): void;
    story(story: string): void;
    suite(name: string): void;
    parentSuite(name: string): void;
    subSuite(name: string): void;
    owner(owner: string): void;
    severity(severity: string): void;
    tag(tag: string): void;
    issue(name: string, url: string): void;
    tms(name: string, url: string): void;
    attach(source: string | Buffer, type: string): void;
    start(body: (step: CucumberWorldStep) => any | Promise<any>): Promise<CucumberAttachmentMetadata>;
}
export declare class CucumberAllureWorld extends World implements Omit<CucumberExecutable, "attach"> {
    label(label: string, value: string): Promise<void>;
    link(url: string, name?: string, type?: string): Promise<void>;
    parameter(name: string, value: string, options?: ParameterOptions): Promise<void>;
    description(markdown: string): Promise<void>;
    descriptionHtml(html: string): Promise<void>;
    writeEnvironmentInfo(info: Record<string, string>): Promise<void>;
    writeCategoriesDefinitions(categories: Category[]): Promise<void>;
    step(name: string, body: (this: CucumberWorldStep, step: CucumberWorldStep) => Promise<any>): Promise<void>;
    epic(epic: string): Promise<void>;
    feature(feature: string): Promise<void>;
    story(story: string): Promise<void>;
    suite(name: string): Promise<void>;
    parentSuite(name: string): Promise<void>;
    subSuite(name: string): Promise<void>;
    owner(owner: string): Promise<void>;
    severity(severity: string): Promise<void>;
    tag(tag: string): Promise<void>;
    issue(name: string, url: string): Promise<void>;
    tms(name: string, url: string): Promise<void>;
}
